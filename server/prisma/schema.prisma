// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid Int @id @default(autoincrement())
  name String
  number String @unique
  aadhar_number String @unique
  address String
  kvy KYV?
  aadhar_details AadharDetails?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AadharDetails {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [uid])
  userId Int @unique
  aadhar_number String
  full_address String
  name String
  care_of String
  date_of_birth String
  gender String
  email_hash String
  mobile_hash String
}

model KYV {
  id Int @id @default(autoincrement())
  voter_card_number String? @unique
  address String?
  constituent_assembly String?
  user User? @relation(fields: [userId], references: [uid])
  userId Int @unique
  doneAt DateTime @default(now())
}

model Candidates {
  id Int @id @default(autoincrement())
  name String
  age Int
  political_party String
  consistuency String
  election Elections @relation(fields: [electionId], references: [id])
  electionId Int
  votes Int @default(0)
}

model Elections {
  id Int @id @default(autoincrement())
  title String
  status String @default("Pending")    // Upcoming, Completed, Ongoing, Pending
  startdate DateTime
  enddate DateTime
  candidates Candidates[]
}
